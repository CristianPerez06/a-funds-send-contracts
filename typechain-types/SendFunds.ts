/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common'

export declare namespace SendFunds {
  export type SentTransactionStruct = {
    reciever: PromiseOrValue<string>
    amount: PromiseOrValue<BigNumberish>
    timestamp: PromiseOrValue<BigNumberish>
  }

  export type SentTransactionStructOutput = [string, BigNumber, BigNumber] & {
    reciever: string
    amount: BigNumber
    timestamp: BigNumber
  }
}

export interface SendFundsInterface extends utils.Interface {
  functions: {
    'getAllTxn()': FunctionFragment
    'sendFunds(address,uint256)': FunctionFragment
  }

  getFunction(nameOrSignatureOrTopic: 'getAllTxn' | 'sendFunds'): FunctionFragment

  encodeFunctionData(functionFragment: 'getAllTxn', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'sendFunds',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string

  decodeFunctionResult(functionFragment: 'getAllTxn', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'sendFunds', data: BytesLike): Result

  events: {
    'NewTxn(address,uint256,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'NewTxn'): EventFragment
}

export interface NewTxnEventObject {
  to: string
  amount: BigNumber
  timestamp: BigNumber
}
export type NewTxnEvent = TypedEvent<[string, BigNumber, BigNumber], NewTxnEventObject>

export type NewTxnEventFilter = TypedEventFilter<NewTxnEvent>

export interface SendFunds extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: SendFundsInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    getAllTxn(overrides?: CallOverrides): Promise<[SendFunds.SentTransactionStructOutput[]]>

    sendFunds(
      _to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  getAllTxn(overrides?: CallOverrides): Promise<SendFunds.SentTransactionStructOutput[]>

  sendFunds(
    _to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    getAllTxn(overrides?: CallOverrides): Promise<SendFunds.SentTransactionStructOutput[]>

    sendFunds(
      _to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    'NewTxn(address,uint256,uint256)'(
      to?: PromiseOrValue<string> | null,
      amount?: null,
      timestamp?: null
    ): NewTxnEventFilter
    NewTxn(to?: PromiseOrValue<string> | null, amount?: null, timestamp?: null): NewTxnEventFilter
  }

  estimateGas: {
    getAllTxn(overrides?: CallOverrides): Promise<BigNumber>

    sendFunds(
      _to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    getAllTxn(overrides?: CallOverrides): Promise<PopulatedTransaction>

    sendFunds(
      _to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
